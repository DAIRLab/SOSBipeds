% Constants
T = 10;
d = 6;
num_modes = 2;

% Variables
t = msspoly('t', 1);
x = cell(num_modes, 1);
F = cell(num_modes, 1);
hX = cell(num_modes, 1);
hXT = cell(num_modes, 1);
sX = cell(num_modes, num_modes);
R = cell(num_modes, num_modes);

% Set the boundary to be a box constraint 
hB = cell(num_modes, 1);

% Box constraints are used here
outerRadius = 10;
options.outerRadius = outerRadius;

% Dynamics
mu = 1;
for i = 1:num_modes
    x{i} = msspoly('x', model.num_states);
end
y = x{1};
F{1} = T*[-y(2); -mu*(1- y(1)^2)*y(2) + y(1)];
y = x{2};
F{1} = T*[-y(2); -mu*(1- y(1)^2)*y(2) + y(1)];

% Target region
W = [

% Domains
% Mode 1
y = x{1};
ny = size(y, 1);
boxLimit = [];
for j = 1:ny
    boxLimit = [boxLimit; options.outerRadius  + y(j); options.outerRadius - y(j)];
end
hB{1} = boxLimit;
hX{1} = [y(1); hB{1}];
hXT{1} = [1 - W; hX{1}];
sX{1, 2} = [y(1) + y(2)/omega_0 - y(3); -1*(y(1) + y(2)/omega_0 - y(3))];
sX{1, 3} = [y(1) + y(2)/omega_0; -1*(y(1) + y(2)/omega_0)];
sX{1, 4} = [...
    y(1) + y(2)/omega_0; 
    y(1) + y(2)/omega_0 - y(3); 
    -1*(y(1) + y(2)/omega_0); 
    -1*(y(1) + y(2)/omega_0 - y(3)) ];
R{1, 2} = x{2};
R{1, 3} = x{3};
R{1, 4} = x{4};